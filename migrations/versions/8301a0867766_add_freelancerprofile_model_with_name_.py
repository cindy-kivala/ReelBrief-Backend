"""Add FreelancerProfile model with name column and relationships

Revision ID: 8301a0867766
Revises: f1640af26dd1
Create Date: 2025-10-29 23:38:44.278905

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8301a0867766'
down_revision = 'f1640af26dd1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, add columns as nullable to avoid NOT NULL violation
    with op.batch_alter_table('freelancer_profiles', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=150), nullable=True))
        batch_op.add_column(sa.Column('email', sa.String(length=150), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('hourly_rate',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('application_status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=True)
        batch_op.alter_column('rejection_reason',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.create_foreign_key(None, 'users', ['approved_by'], ['id'])

    # Set default values for existing rows
    op.execute("UPDATE freelancer_profiles SET name = 'Unknown User' WHERE name IS NULL")
    op.execute("UPDATE freelancer_profiles SET email = CONCAT('user', id, '@example.com') WHERE email IS NULL")
    
    # Now make the columns NOT NULL
    with op.batch_alter_table('freelancer_profiles', schema=None) as batch_op:
        batch_op.alter_column('name', nullable=False)
        batch_op.alter_column('email', nullable=False)
        batch_op.create_unique_constraint(None, ['email'])

    # Only drop tables if they exist and you're sure you want to remove them
    # Comment out these lines if you want to keep the tables:
    # op.drop_table('activity_log')
    # op.drop_table('escrow_transactions')
    # op.drop_table('portfolio_items')
    # op.drop_table('reviews')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Recreate tables if they were dropped (comment out if you kept them)
    # op.create_table('reviews',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # ... (keep the existing downgrade code for tables)
    # )

    with op.batch_alter_table('freelancer_profiles', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('rejection_reason',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('application_status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('hourly_rate',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.drop_column('updated_at')
        batch_op.drop_column('email')
        batch_op.drop_column('name')

    # ### end Alembic commands ###