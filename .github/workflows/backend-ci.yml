name: Backend CI/CD

on:
  push:
    branches: [development, main]
  pull_request:
    branches: [development, main]

jobs:
  quality-checks:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run isort check
        run: isort app/ --check-only
      
      - name: Run black check
        run: black app/ --check
      
      - name: Run flake8
        run: flake8 app/
      
      - name: Security check with bandit
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-secret
        run: |
          # If you have tests, run them
          # pytest --cov=app --cov-report=xml
          echo "Tests will run here when implemented"
      
      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true

  deploy-staging:
    name: Deploy to Staging (Render)
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    
    steps:
      - name: Notify deployment start
        run: echo "Deploying to Render staging..."
      
      - name: Trigger Render Deploy
        run: |
          echo "Render auto-deploys on push to development"
          echo "No manual trigger needed"
      
      - name: Deployment status
        run: echo "Staging deployment triggered"

  deploy-production:
    name: Deploy to Production (Render)
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Notify deployment start
        run: echo "Deploying to Render production..."
      
      - name: Trigger Render Deploy
        run: |
          echo "Render auto-deploys on push to main"
          echo "Production deployment in progress"
      
      - name: Deployment status
        run: echo "Production deployment triggered"